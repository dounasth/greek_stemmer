<?php
header('Content-Type: text/html; charset=ISO-8859-7');
/**
 *  Greek Stemmer.
 *  @author Magarisiotis Konstantinos <magarisiotis.kostas@hotmail.com>
 * 
 *  Original Stemmer by "Spyros Saroukos".
 * 
 * 
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 */





/**
 *  The call function of the stemmer.
 *  It receives the text and returnes the stemmed words.
 * 
 *  @param string $word         :   The text we want to stem
 *  @param bool $simple_stemmer :   If TRUE then it returns all the stemmed words.
 *                                  If FALSE, then it returns only the words that have meaning for
 *                                  the content of the whole text.
 *  @return array               :   The stemmed words in an array
 */
function start($word, $simple_stemmer) {
    // The array that holds the stemmed words
    $stem_con = array();

    // Pre - manipulation
    // Remove the EndLines and dots (.) from the ending of the words.
    $w = trim($word);         // Remove empty spaces
    $w = explode("\n", $w);    // Explode the string based on new line characters
    $w = implode(" ", $w);     // Reunite the string (it does not contain any new lines)
    $w = explode(".", $w);     // Explode the string based on dots.
    $w = implode(" ", $w);     // Reunite the string
    $w = explode(" ", $w);     // Explode it into an array
    // Stem each one word
    for ($i = 0; $i < sizeof($w); $i++) {
        
        // Pass each word into the stemmer
        $stemmed = stemWord($w[$i], $simple_stemmer);

        // Push the stemmed word into the array, only if a value is returned
        if ($stemmed === null)
            continue;
        else
            array_push($stem_con, $stemmed);
    }
    
    if($simple_stemmer == FALSE){
        $content_stem_con = [];
        foreach($stem_con as $word){
            if(array_key_exists($word, $content_stem_con)){
                $value = $content_stem_con[$word];
                $value++;
                $content_stem_con[$word] = $value;
            }
            else
                $content_stem_con[$word] = 1;
        }
        return $content_stem_con;
    }
    
    // Return the stemmed words
    return $stem_con;
}






/**
 *  The stemmer
 *  
 *  @param type $w  :   The word to be stemmed
 */
function stemWord($w, $simple_stemmer) {
    // Change the encoding to "ISO-8859-7" and keep track of the change.
    $encoding_changed = FALSE;
    if (mb_check_encoding($w, "UTF-8")) {
        // Flag - the encoding has changed
        $encoding_changed = TRUE;
        $w = mb_convert_encoding($w, "ISO-8859-7", "UTF-8");
    }

   
    // Remove all special characters and numbers
    $w = str_replace("<br />", "", $w);
    $w = str_replace(".", "", $w);
    $w = str_replace(",", "", $w);
    $w = str_replace(";", "", $w);
    $w = str_replace("/", "", $w);
    $w = str_replace("?", "", $w);
    $w = str_replace(":", "", $w);
    $w = str_replace("'", "", $w);
    $w = str_replace("\"", "", $w);
    $w = str_replace("\\", "", $w);
    $w = str_replace("[", "", $w);
    $w = str_replace("{", "", $w);
    $w = str_replace("]", "", $w);
    $w = str_replace("}", "", $w);
    $w = str_replace("|", "", $w);
    $w = str_replace("~", "", $w);
    $w = str_replace("`", "", $w);
    $w = str_replace("!", "", $w);
    $w = str_replace("@", "", $w);
    $w = str_replace("#", "", $w);
    $w = str_replace("$", "", $w);
    $w = str_replace("%", "", $w);
    $w = str_replace("%", "", $w);
    $w = str_replace("^", "", $w);
    $w = str_replace("&", "", $w);
    $w = str_replace("*", "", $w);
    $w = str_replace("(", "", $w);
    $w = str_replace(")", "", $w);
    $w = str_replace("-", "", $w);
    $w = str_replace("_", "", $w);
    $w = str_replace("+", "", $w);
    $w = str_replace("=", "", $w);
    $w = str_replace("0", "", $w);
    $w = str_replace("1", "", $w);
    $w = str_replace("2", "", $w);
    $w = str_replace("3", "", $w);
    $w = str_replace("4", "", $w);
    $w = str_replace("5", "", $w);
    $w = str_replace("6", "", $w);
    $w = str_replace("7", "", $w);
    $w = str_replace("8", "", $w);
    $w = str_replace("9", "", $w);
    $w = str_replace("╚", "", $w);
    $w = str_replace("╩", "", $w);
    
    // Convert to uppercase
    $w = mb_strtoupper($w, 'ISO-8859-7');
    
    
    // Replace some values - remove the tonnation
    $unacceptedLetters = [ "А"=>"а", "Б"=>"б", "Ц"=>"ц", "Д"=>"д", "Е"=>"е", "Ф"=>"ф", "Г"=>"г", "Х"=>"х", "И"=>"и", "Й"=>"й",
        "К"=>"к", "Л"=>"л", "М"=>"м", "Н"=>"н", "О"=>"о", "П"=>"п", "Я"=>"я", "С"=>"с", "Т"=>"т", "У"=>"у", "Ж"=>"ж", "В"=>"в",
        "Ь"=>"ь", "Ы"=>"ы", "э"=>"а", "щ"=>"е", "ч"=>"г", "ъ"=>"и", "Э"=>"о", "Щ"=>"у", "Ч"=>"ы", "З"=>"и", "Ш"=>"у", 
        "╤"=>"а", "╦"=>"е", "╧"=>"г", "╨"=>"и", "╪"=>"о", "╬"=>"у", "©"=>"ы","Р"=>"с"];
    
    // Replace any occurrance of the above letters
    for ($i = 0; $i < strlen($w); $i++) {
        if (array_key_exists($w[$i],$unacceptedLetters))
            $w[$i] = $unacceptedLetters[$w[$i]];
    }
    
    
    // If we choose to return only the valuable words, then we remove the Stop Words.
    if( $simple_stemmer == FALSE){
        // ********** The following rules could be modified.
        // Stop Words Removal
        $stop_w = array("ейо", "аба", "аца", "ацг", "ацы", "адг", "ады", "ае", "аеи", "ахы", "аи", "аий", "айг", "айола", "айолг", "айяибыс", "ака", "акгхеиа", "акгхима", "аккавоу", "аккиыс", "аккиытийа", "аккоиыс", "аккоиытийа", "аккоте", "акт", "акы", "ала", "але", "алеса", "алесыс", "алы", "ам", "ама", "амалеса", "амалетану", "амеу", "амти", "амтипеяа", "амтис", "амы", "амытеяы", "анажма", "ап", "апемамти", "апо", "апоье", "апы", "аяа", "аяаце", "аяе", "аяй", "аяйета", "аяк", "аял", "аят", "аяу", "аяы", "ас", "аса", "асо", "ата", "ате", "атг", "ати", "атл", "ато", "ауяио", "ажг", "ажотоу", "ажоу", "ав", "аве", "аво", "аьа", "аье", "аьг", "аьу", "аые", "аыо", "бам", "бат", "бав", "беа", "бебаиотата", "бгн", "биа", "бие", "биг", "био", "бог", "боы", "бяе", "ца", "цаб", "цая", "цем", "цес", "", "цг", "цгм", "ци", "циа", "цие", "цим", "цио", "цйи", "циати", "цйу", "цог", "цоо", "цягцояа", "цяи", "цяу", "цуг", "цуяы", "да", "де", "дег", "деи", "дем", "дес", "дг", "дгхем", "дгкадг", "дгы", "ди", "диа", "диаяйыс", "диокоу", "дис", "дивыс", "док", "дом", "дяа", "дяу", "дяв", "дуе", "дуо", "ды", "еал", "еам", "еая", "ехг", "еи", "еиделг", "еихе", "еилаи", "еиласте", "еимаи", "еис", "еисаи", "еисасте", "еисте", "еите", "еива", "еивале", "еивам", "еивате", "еиве", "еивес", "ей", "ейеи", "ека", "еки", "елп", "ем", "емтекыс", "емтос", "емтылетану", "емы", "ен", "енажма", "ени", "енисоу", "ены", "еой", "епамы", "епеидг", "епеита", "епг", "епи", "еписгс", "еполемыс", "еяа", "ес", "есас", "есе", "есеис", "есема", "есг", "есты", "есу", "есы", "ети", "етси", "еу", "еуа", "еуце", "еухус", "еутувыс", "еже", "еженгс", "ежт", "еве", "евеи", "евеис", "евете", "евхес", "еволе", "евоуле", "евоум", "евтес", "евы", "еыс", "феа", "фег", "феи", "фем", "фгм", "фы", "г", "гдг", "гду", "гхг", "гко", "гли", "гпа", "гсасте", "гсоум", "гта", "гтам", "гтаме", "гтои", "гттом", "гы", "ха", "хуе", "хыя", "и", "иа", "ибо", "идг", "идиыс", "ие", "ии", "иии", "ийа", "ико", "ила", "има", "имы", "ине", "ино", "ио", "иои", "иса", "исале", "исе", "исг", "исиа", "исо", "исыс", "иыб", "иым", "иыс", "иам", "йах", "йахе", "йахети", "йахокоу", "йахыс", "йаи", "йам", "йапоте", "йапоу", "йапыс", "йат", "йата", "йати", "йатити", "йатопим", "йаты", "йаы", "йбо", "йеа", "йеи", "йем", "йи", "йил", "йиокас", "йит", "йив", "ййе", "йкисе", "йкп", "йой", "йомта", "йов", "йтк", "йуя", "йуяиыс", "йы", "йым", "ка", "кеа", "кем", "кео", "киа", "кицайи", "кицоукайи", "кицо", "кицытеяо", "кио", "кия", "коцы", "коипа", "коипом", "кос", "кс", "куы", "ла", "лафи", "лайаяи", "лакиста", "лакком", "лам", "лан", "лас", "лат", "ле", "лехауяио", "леи", "леиом", "лек", "лекеи", "леккетаи", "лелиас", "лем", "лес", "леса", "лет", "лета", "летану", "левяи", "лг", "лгде", "лгм", "лгпыс", "лгте", "ли", "лин", "лис", "лле", "лма", "лоб", "локис", "локомоти", "ломава", "ломолиас", "лиа", "лоу", "лпа", "лпояеи", "лпояоум", "лпяабо", "лпяос", "лпы", "лу", "луа", "лум", "ма", "мае", "маи", "мао", "мд", "мею", "меа", "мее", "мео", "ми", "миа", "мий", "мик", "мим", "мио", "мта", "мте", "мти", "мто", "мум", "мые", "мыяис", "нама", "нажмийа", "неы", "ни", "о", "оа", "оап", "одо", "ое", "офо", "оге", "ои", "оиа", "оиг", "ойа", "окоцуяа", "окомем", "окотека", "окысдиокоу", "олыс", "╪лыс", "╪пыс", "ом", "оме", "омо", "опа", "опе", "опг", "опо", "опоиадгпоте", "опоиамдгпоте", "опоиасдгпоте", "опоидгпоте", "опоиесдгпоте", "опоиодгпоте", "опоиомдгпоте", "опоиосдгпоте", "опоиоудгпоте", "опоиоусдгпоте", "опоиымдгпоте", "опотедгпоте", "опоу", "опоудгпоте", "опыс", "ояа", "ояе", "ояг", "ояо", "ояж", "ояы", "оса", "осадгпоте", "осе", "осесдгпоте", "осгдгпоте", "осгмдгпоте", "осгсдгпоте", "осодгпоте", "осоидгпоте", "осомдгпоте", "ососдгпоте", "осоудгпоте", "осоусдгпоте", "осымдгпоте", "отам", "оте", "оти", "отидгпоте", "оу", "оуде", "оуй", "оус", "оуте", "оуж", "ови", "оьа", "оье", "оьг", "оьи", "оьо", "па", "паки", "пам", "памтоте", "памтоу", "памтыс", "пап", "пая", "паяа", "пеи", "пея", "пеяа", "пеяи", "пеяипоу", "пеяси", "пеяуси", "пес", "пи", "пиа", "пихамом", "пий", "пио", "писы", "пит", "пиы", "пкаи", "пкеом", "пкгм", "пкы", "пл", "поа", "пое", "пок", "поку", "поп", "поте", "поу", "поухе", "поухема", "пяепеи", "пяи", "пяим", "пяо", "пяойеилемоу", "пяойеитаи", "пяопеяси", "пяос", "пяотоу", "пяовхес", "пяовтес", "пяытутеяа", "пуа", "пун", "пуо", "пуя", "пв", "пы", "пык", "пыс", "яа", "яаи", "яап", "яас", "яе", "яеа", "яее", "яеи", "ягс", "яхы", "яио", "яо", "яою", "яое", "яоф", "яог", "яох", "яои", "яой", "яок", "яом", "яос", "яоу", "саи", "сам", "сао", "сас", "се", "сеис", "сей", "сен", "сея", "сет", "сеж", "сглеяа", "си", "сиа", "сица", "сий", "сив", "сйи", "сои", "сой", "сок", "сом", "сос", "соу", "сяи", "ста", "стг", "стгм", "стгс", "стис", "сто", "стом", "стоу", "стоус", "стым", "су", "суцвяомыс", "сум", "сумала", "сумепыс", "сумгхыс", "сведом", "сыста", "та", "таде", "тай", "там", "тао", "тау", "тава", "тавате", "те", "теи", "тек", "текийа", "текийыс", "тес", "тет", "тфо", "тг", "тгк", "тгм", "тгс", "ти", "тий", "тил", "типота", "типоте", "тис", "тмт", "то", "тои", "той", "тол", "том", "топ", "тос", "тос?м", "тоса", "тосес", "тосг", "тосгм", "тосгс", "тосо", "тосои", "тосом", "тосос", "тосоу", "тосоус", "тоте", "тоу", "тоукависто", "тоукавистом", "тоус", "тс", "тса", "тсе", "тувом", "ты", "тым", "тыяа", "уас", "уба", "убо", "уие", "уио", "ука", "укг", "уми", "уп", "упея", "упо", "упоьг", "упоьим", "устеяа", "ужг", "уьг", "жа", "жаю", "жае", "жам", "жан", "жас", "жаы", "жеф", "жеи", "жетос", "жеу", "жи", "жик", "жис", "жон", "жпа", "жяи", "ва", "ваг", "вак", "вам", "важ", "ве", "веи", "вхес", "ви", "виа", "вик", "вио", "вкл", "вл", "вог", "вок", "вяы", "втес", "выяис", "выяиста", "ьес", "ьгка", "ьи", "ьит", "ы", "ыа", "ыас", "ыде", "ыес", "ыхы", "ыла", "ыле", "ым", "ыо", "ыом", "ыоу", "ыс", "ысам", "ысг", "ысотоу", "ыспоу", "ысте", "ыстосо", "ыта", "ыв", "ыым", "адиайопа", "аи", "айола", "айолг", "айяибыс", "акгхеиа", "акгхима", "акка", "аккавоу", "аккес", "аккг", "аккгм", "аккгс", "аккиыс", "аккиытийа", "акко", "аккои", "аккоиыс", "аккоиытийа", "акком", "аккос", "аккоте", "аккоу", "аккоус", "аккым", "ала", "алеса", "алесыс", "ам", "ама", "амалеса", "амалетану", "амеу", "амти", "амтипеяа", "амтис", "амы", "амытеяы", "анажма", "ап", "апемамти", "апо", "апоье", "аяа", "аяаце", "аяца", "аяцотеяо", "аяистеяа", "аяйета", "аявийа", "ас", "ауяио", "аута", "аутес", "аутг", "аутгм", "аутгс", "ауто", "аутои", "аутом", "аутос", "аутоу", "аутоус", "аутым", "ажотоу", "ажоу", "бебаиа", "бебаиотата", "ци", "циа", "цягцояа", "цуяы", "да", "де", "деима", "дем", "дениа", "дгхем", "дгкадг", "ди", "диа", "диаяйыс", "дийа", "дийо", "дийои", "дийос", "дийоу", "дийоус", "диокоу", "дипка", "дивыс", "еам", "еауто", "еаутом", "еаутоу", "еаутоус", "еаутым", "ецйаияа", "ецйаияыс", "ецы", "еды", "еиделг", "еихе", "еилаи", "еиласте", "еимаи", "еис", "еисаи", "еисасте", "еисте", "еите", "еива", "еивале", "еивам", "еивате", "еиве", "еивес", "ейаста", "ейастес", "ейастг", "ейастгм", "ейастгс", "ейасто", "ейастои", "ейастом", "ейастос", "ейастоу", "ейастоус", "ейастым", "ейеи", "ейеима", "ейеимес", "ейеимг", "ейеимгм", "ейеимгс", "ейеимо", "ейеимои", "ейеимом", "ейеимос", "ейеимоу", "ейеимоус", "ейеимым", "ейтос", "елас", "елеис", "елема", "елпяос", "ем", "ема", "емам", "емас", "емос", "емтекыс", "емтос", "емтылетану", "емы", "ен", "енажма", "енгс", "енисоу", "ены", "епамы", "епеидг", "епеита", "епи", "еписгс", "еполемыс", "есас", "есеис", "есема", "есты", "есу", "етеяа", "етеяаи", "етеяас", "етеяес", "етеяг", "етеягс", "етеяо", "етеяои", "етеяом", "етеяос", "етеяоу", "етеяоус", "етеяым", "етоута", "етоутес", "етоутг", "етоутгм", "етоутгс", "етоуто", "етоутои", "етоутом", "етоутос", "етоутоу", "етоутоус", "етоутым", "етси", "еуце", "еухус", "еутувыс", "еженгс", "евеи", "евеис", "евете", "евхес", "еволе", "евоуле", "евоум", "евтес", "евы", "еыс", "г", "гдг", "гластам", "гласте", "глоум", "гсастам", "гсасте", "гсоум", "гтам", "гтаме", "гтои", "гттом", "ха", "и", "идиа", "идиам", "идиас", "идиес", "идио", "идиои", "идиом", "идиос", "идиоу", "идиоус", "идиым", "идиыс", "ии", "иии", "исале", "исиа", "исыс", "йахе", "йахелиа", "йахелиас", "йахема", "йахемас", "йахемос", "йахети", "йахокоу", "йахыс", "йаи", "йайа", "йайыс", "йака", "йакыс", "йалиа", "йалиам", "йалиас", "йалпоса", "йалпосес", "йалпосг", "йалпосгм", "йалпосгс", "йалпосо", "йалпосои", "йалпосом", "йалпосос", "йалпосоу", "йалпосоус", "йалпосым", "йамеис", "йамем", "йамема", "йамемам", "йамемас", "йамемос", "йапоиа", "йапоиам", "йапоиас", "йапоиес", "йапоио", "йапоиои", "йапоиом", "йапоиос", "йапоиоу", "йапоиоус", "йапоиым", "йапоте", "йапоу", "йапыс", "йат", "йата", "йати", "йатити", "йатопим", "йаты", "йиокас", "йкп", "йомта", "йтк", "йуяиыс", "кицайи", "кицо", "кицытеяо", "коцы", "коипа", "коипом", "ла", "лафи", "лайаяи", "лайяуа", "лакиста", "лакком", "лас", "ле", "лехауяио", "леиом", "лекеи", "леккетаи", "лелиас", "лем", "леяийа", "леяийес", "леяийои", "леяийоус", "леяийым", "леса", "лет", "лета", "летану", "левяи", "лг", "лгде", "лгм", "лгпыс", "лгте", "лиа", "лиам", "лиас", "локис", "локомоти", "ломава", "ломес", "ломг", "ломгм", "ломгс", "ломо", "ломои", "ломолиас", "ломос", "ломоу", "ломоус", "ломым", "лоу", "лпояеи", "лпояоум", "лпяабо", "лпяос", "ма", "маи", "мыяис", "нама", "нажмийа", "о", "ои", "ока", "окес", "окг", "окгм", "окгс", "око", "окоцуяа", "окои", "оком", "окомем", "окос", "окотека", "окоу", "окоус", "окым", "окыс", "окысдиокоу", "олыс", "опоиа", "опоиадгпоте", "опоиам", "опоиамдгпоте", "опоиас", "опоиасдгпоте", "опоидгпоте", "опоиес", "опоиесдгпоте", "опоио", "опоиодгпоте", "опоиои", "опоиом", "опоиомдгпоте", "опоиос", "опоиосдгпоте", "опоиоу", "опоиоудгпоте", "опоиоус", "опоиоусдгпоте", "опоиым", "опоиымдгпоте", "опоте", "опотедгпоте", "опоу", "опоудгпоте", "опыс", "ояислема", "ояислемес", "ояислемым", "ояислемыс", "оса", "осадгпоте", "осес", "осесдгпоте", "осг", "осгдгпоте", "осгм", "осгмдгпоте", "осгс", "осгсдгпоте", "осо", "осодгпоте", "осои", "осоидгпоте", "осом", "осомдгпоте", "осос", "ососдгпоте", "осоу", "осоудгпоте", "осоус", "осоусдгпоте", "осым", "осымдгпоте", "отам", "оти", "отидгпоте", "отоу", "оу", "оуде", "оуте", "ови", "паки", "памтоте", "памтоу", "памтыс", "паяа", "пеяа", "пеяи", "пеяипоу", "пеяиссотеяо", "пеяси", "пеяуси", "пиа", "пихамом", "пио", "писы", "пкаи", "пкеом", "пкгм", "поиа", "поиам", "поиас", "поиес", "поио", "поиои", "поиом", "поиос", "поиоу", "поиоус", "поиым", "поку", "посес", "посг", "посгм", "посгс", "посои", "посос", "посоус", "поте", "поу", "поухе", "поухема", "пяепеи", "пяим", "пяо", "пяойеилемоу", "пяойеитаи", "пяопеяси", "пяос", "пяотоу", "пяовхес", "пяовтес", "пяытутеяа", "пыс", "сам", "сас", "се", "сеис", "сглеяа", "сица", "соу", "ста", "стг", "стгм", "стгс", "стис", "сто", "стом", "стоу", "стоус", "стым", "суцвяомыс", "сум", "сумала", "сумепыс", "сумгхыс", "сувма", "сувмас", "сувмес", "сувмг", "сувмгм", "сувмгс", "сувмо", "сувмои", "сувмом", "сувмос", "сувмоу", "сувмоу", "сувмоус", "сувмым", "сувмыс", "сведом", "сыста", "та", "таде", "таута", "таутес", "таутг", "таутгм", "таутгс", "тауто", "таутом", "таутос", "таутоу", "таутым", "тава", "тавате", "текийа", "текийыс", "тес", "тетоиа", "тетоиам", "тетоиас", "тетоиес", "тетоио", "тетоиои", "тетоиом", "тетоиос", "тетоиоу", "тетоиоус", "тетоиым", "тг", "тгм", "тгс", "ти", "типота", "типоте", "тис", "то", "тои", "том", "тос", "тоса", "тосес", "тосг", "тосгм", "тосгс", "тосо", "тосои", "тосом", "тосос", "тосоу", "тосоус", "тосым", "тоте", "тоу", "тоукависто", "тоукавистом", "тоус", "тоута", "тоутес", "тоутг", "тоутгм", "тоутгс", "тоуто", "тоутои", "тоутоис", "тоутом", "тоутос", "тоутоу", "тоутоус", "тоутым", "тувом", "тым", "тыяа", "уп", "упея", "упо", "упоьг", "упоьим", "устеяа", "жетос", "валгка", "вхес", "втес", "выяис", "выяиста", "ьгка", "ы", "ыяаиа", "ыс", "ысам", "ысотоу", "ыспоу", "ысте", "ыстосо", "ыв", "емос", "дуо", "тяиа", "тяиым", "тессеяа", "тессаяым", "пемте", "ени", "ежта", "ойты", "овты", "еммиа");
        if (in_array($w, $stop_w))
            return null;

        // Verbs Removal
        $re = '/(.+?)(ифа|иса|исы|исоум|ифес|ифе|ифале|ифате|ифам|ифаме|ифы|ифеис|ифеи|ифоуле|ифете|ифоум|ифоуме|еи|исе|гсе|омтаи|оум|омтас)$/';
        if (preg_match($re, $w))
            return null;
    }





    // ------------------------- Stemming Rules : Original Stemmer
     
    
    // step1list is used in Step 1. 41 stems
    $step1list = Array();
    $step1list["жациа"] = "жа";
    $step1list["жациоу"] = "жа";
    $step1list["жациым"] = "жа";
    $step1list["сйациа"] = "сйа";
    $step1list["сйациоу"] = "сйа";
    $step1list["сйациым"] = "сйа";
    $step1list["окоциоу"] = "око";
    $step1list["окоциа"] = "око";
    $step1list["окоциым"] = "око";
    $step1list["социоу"] = "со";
    $step1list["социа"] = "со";
    $step1list["социым"] = "со";
    $step1list["татоциа"] = "тато";
    $step1list["татоциоу"] = "тато";
    $step1list["татоциым"] = "тато";
    $step1list["йяеас"] = "йяе";
    $step1list["йяеатос"] = "йяе";
    $step1list["йяеата"] = "йяе";
    $step1list["йяеатым"] = "йяе";
    $step1list["пеяас"] = "пея";
    $step1list["пеяатос"] = "пея";
    $step1list["пеяатг"] = "пея"; //Added by Spyros . also at $re in step1
    $step1list["пеяата"] = "пея";
    $step1list["пеяатым"] = "пея";
    $step1list["теяас"] = "тея";
    $step1list["теяатос"] = "тея";
    $step1list["теяата"] = "тея";
    $step1list["теяатым"] = "тея";
    $step1list["жыс"] = "жы";
    $step1list["жытос"] = "жы";
    $step1list["жыта"] = "жы";
    $step1list["жытым"] = "жы";
    $step1list["йахестыс"] = "йахест";
    $step1list["йахестытос"] = "йахест";
    $step1list["йахестыта"] = "йахест";
    $step1list["йахестытым"] = "йахест";
    $step1list["цецомос"] = "цецом";
    $step1list["цецомотос"] = "цецом";
    $step1list["цецомота"] = "цецом";
    $step1list["цецомотым"] = "цецом";

    $v = '(а|е|г|и|о|у|ы)'; // vowel
    $v2 = '(а|е|г|и|о|ы)';      //vowel without Y

    $test1 = true;              // Variable needed later


    /*
     * preg_match definition
     * 
     * preg_match( $pattern, $input_string, $matches);
     * $pattern     :   the pattern to search for as a string
     * $input_string:   the input string
     * $matches     :   if $matches is provided, then it is filled with the results of search
     */
    
    
    $match = [];
    
    //Step S1. 14 stems
    $re = '/^(.+?)(ифа|ифес|ифе|ифале|ифате|ифам|ифаме|ифы|ифеис|ифеи|ифоуле|ифете|ифоум|ифоуме)$/';
    $exceptS1 = '/^(амалпа|елпа|епа|намапа|па|пеяипа|ахяо|сумахяо|даме)$/';
    $exceptS2 = '/^(лаяй|йоям|алпая|аяя|бахуяи|баяй|б|бокбоя|цйя|цкуйоя|цкуйуя|илп|к|коу|лая|л|пя|лпя|покуя|п|я|пипеяоя)$/';
    if (preg_match($re, $w, $match)) {
        $stem = $match[1];
        $suffix = $match[2];
        $w = $stem . $step1list[$suffix];
        $test1 = false;
        if (preg_match($exceptS1, $w))
            $w = $w . 'I';
        if (preg_match($exceptS2, $w))
            $w = $w . 'Iф';


        return returnStem($w, $encoding_changed);
    }




    //Step S2. 7 stems
    $re = '/^(.+?)(ыхгйа|ыхгйес|ыхгйе|ыхгйале|ыхгйате|ыхгйам|ыхгйаме)$/';
    $exceptS1 = '/^(ак|би|ем|уь|ки|фы|с|в)$/';
    if (preg_match($re, $w, $match)) {
        $stem = $match[1];
        $suffix = $match[2];
        $w = $stem . $step1list[$suffix];
        $test1 = false;
        if (preg_match($exceptS1, $w)) {
            $w = $w . 'ым';
        }

        return returnStem($w, $encoding_changed);
    }





    //Step S3. 7 stems
    $re = '/^(.+?)(иса|исес|исе|исале|исате|исам|исаме)$/';
    $exceptS1 = '/^(амалпа|ахяо|елпа|есе|есыйке|епа|намапа|епе|пеяипа|ахяо|сумахяо|даме|йке|ваятопа|енаява|летепе|апойке|апейке|ейке|пе|пеяипа)$/';
    $exceptS2 = '/^(ам|аж|це|цицамтоаж|цйе|дглойяат|йол|цй|л|п|поуйал|око|кая)$/';
    if ($w == "иса") {
        $w = "ис";
        return $w;
    }
    if (preg_match($re, $w, $match)) {
        $stem = $match[1];
        $suffix = $match[2];
        $w = $stem . $step1list[$suffix];
        $test1 = false;
        if (preg_match($exceptS1, $w)) {
            $w = $w . 'и';
        }

        return returnStem($w, $encoding_changed);
    }


    //Step S4. 7 stems
    $re = '/^(.+?)(исы|исеис|исеи|исоуле|исете|исоум|исоуме)$/';
    $exceptS1 = '/^(амалпа|елпа|есе|есыйке|епа|намапа|епе|пеяипа|ахяо|сумахяо|даме|йке|ваятопа|енаява|летепе|апойке|апейке|ейке|пе|пеяипа)$/';
    if (preg_match($re, $w, $match)) {
        $stem = $match[1];
        $suffix = $match[2];
        $w = $stem . $step1list[$suffix];
        $test1 = false;
        if (preg_match($exceptS1, $w)) {
            $w = $w . 'и';
        }
        return returnStem($w, $encoding_changed);
    }
    
    
    
    //Step S5. 11 stems
    $re = '/^(.+?)(истос|истоу|исто|исте|истои|истым|истоус|истг|истгс|иста|истес)$/';
    $exceptS1 = '/^(л|п|ап|ая|гд|йт|сй|св|уь|жа|вя|вт|айт|аоя|асв|ата|авм|авт|цел|цуя|елп|еуп|евх|гжа|╧жа|йах|йай|йук|куц|лай|лец|тав|жик|выя)$/';
    $exceptS2 = '/^(даме|сумахяо|йке|се|есыйке|асе|пке)$/';
    if (preg_match($re, $w, $match)) {
        $stem = $match[1];
        $suffix = $match[2];
        $w = $stem . $step1list[$suffix];
        $test1 = false;
        if (preg_match($exceptS1, $w)) {
            $w = $w . 'ист';
        }
        if (preg_match($exceptS2, $w)) {
            $w = $w . 'и';
        }
        return returnStem($w, $encoding_changed);
    }
    
    
    
    //Step S6. 6 stems
    $re = '/^(.+?)(исло|ислои|ислос|ислоу|ислоус|ислым)$/';
    $exceptS1 = '/^(ацмыстий|атолий|цмыстий|ехмий|ейкейтий|сйептий|топий)$/';
    $exceptS2 = '/^(се|летасе|лийяосе|ецйке|апойке)$/';
    $exceptS3 = '/^(даме|амтидаме)$/';
    $exceptS4 = '/^(акенамдяим|буфамтим|хеатяим)$/';
    if (preg_match($re, $w, $match)) {
        $stem = $match[1];
        $suffix = $match[2];
        $w = $stem;
        $test1 = false;
        if (preg_match($exceptS1, $w)) {
            $w = str_replace('ий', "", $w);
        }
        if (preg_match($exceptS2, $w)) {
            $w = $w . "исл";
        }
        if (preg_match($exceptS3, $w)) {
            $w = $w . "и";
        }
        if (preg_match($exceptS4, $w)) {
            $w = str_replace('им', "", $w);
        }
        return returnStem($w, $encoding_changed);
    }
    
    
    
    
    
    //Step S7. 4 stems
    $re = '/^(.+?)(аяайи|аяайиа|оудайи|оудайиа)$/';
    $exceptS1 = '/^(с|в)$/';
    if (preg_match($re, $w, $match)) {
        $stem = $match[1];
        $suffix = $match[2];
        $w = $stem;
        $test1 = false;
        if (preg_match($exceptS1, $w)) {
            $w = $w . "Aяай";
        }

        return returnStem($w, $encoding_changed);
    }
    
    
    
    
    
    //Step S8. 8 stems
    $re = '/^(.+?)(айи|айиа|итса|итсас|итсес|итсым|аяайи|аяайиа)$/';
    $exceptS1 = '/^(амхя|балб|бя|йаил|йом|йоя|кабя|коук|лея|лоуст|мацйас|пк|я|яу|с|сй|сой|спам|тф|жаял|в|йапай|акисж|албя|амхя|й|жук|йатяап|йкил|лак|скоб|ж|сж|тсевоскоб)$/';
    $exceptS2 = '/^(б|бак|циам|цк|ф|гцоулем|йаяд|йом|лайяум|муж|патея|п|сй|тос|тяипок)$/';
    $exceptS3 = '/(йоя)$/'; // for words like пкоусиойояитса, пакиойояитса etc
    if (preg_match($re, $w, $match)) {
        $stem = $match[1];
        $suffix = $match[2];
        $w = $stem;
        $test1 = false;
        if (preg_match($exceptS1, $w)) {
            $w = $w . "ай";
        }
        if (preg_match($exceptS2, $w)) {
            $w = $w . "итс";
        }
        if (preg_match($exceptS3, $w)) {
            $w = $w . "итс";
        }
        return returnStem($w, $encoding_changed);
    }
    
    
    
    
    
    
    //Step S9. 3 stems
    $re = '/^(.+?)(идио|идиа|идиым)$/';
    $exceptS1 = '/^(аижм|ия|око|ьак)$/';
    $exceptS2 = '/(е|паивм)$/';
    if (preg_match($re, $w, $match)) {
        $stem = $match[1];
        $suffix = $match[2];
        $w = $stem;
        $test1 = false;
        if (preg_match($exceptS1, $w)) {
            $w = $w . "ид";
        }
        if (preg_match($exceptS2, $w)) {
            $w = $w . "ид";
        }
        return returnStem($w, $encoding_changed);
    }
    
    
    
    
    
    //Step S10. 4 stems
    $re = '/^(.+?)(исйос|исйоу|исйо|исйе)$/';
    $exceptS1 = '/^(д|иб|лгм|я|жяацй|куй|обек)$/';
    if (preg_match($re, $w, $match)) {
        $stem = $match[1];
        $suffix = $match[2];
        $w = $stem;
        $test1 = false;
        if (preg_match($exceptS1, $w)) {
            $w = $w . "исй";
        }

        return returnStem($w, $encoding_changed);
    }






    //Step1 
    $re = '/(.*)(жациа|жациоу|жациым|сйациа|сйациоу|сйациым|окоциоу|окоциа|окоциым|социоу|социа|социым|татоциа|татоциоу|татоциым|йяеас|йяеатос|йяеата|йяеатым|пеяас|пеяатос|пеяатг|пеяата|пеяатым|теяас|теяатос|теяата|теяатым|жыс|жытос|жыта|жытым|йахестыс|йахестытос|йахестыта|йахестытым|цецомос|цецомотос|цецомота|цецомотым)$/';
    if (preg_match($re, $w, $match)) {
        //debug($w,1);
        $stem = $match[1];
        $suffix = $match[2];
        $w = $stem . $step1list[$suffix];
        $test1 = false;
    }
    
    
    
    
    // Step 2a. 2 stems
    $re = '/^(.+?)(адес|адым)$/';
    if (preg_match($re, $w, $match)) {
        $stem = $match[1];
        $w = $stem;
        $re = '/(ой|лал|лам|лпалп|патея|циаци|мтамт|йуя|хеи|пехея)$/';
        if (!preg_match($re, $w)) {
            $w = $w . "ад";
        }
    }
    
    
    
    
    
    //Step 2b. 2 stems
    $re = '/^(.+?)(едес|едым)$/';
    if (preg_match($re, $w)) {
        preg_match($re, $w, $match);
        $stem = $match[1];
        $w = $stem;
        $exept2 = '/(оп|ип|елп|уп|цгп|дап|йяасп|лик)$/';
        if (preg_match($exept2, $w)) {
            $w = $w . 'ед';
        }
    }
    
    
    
    
    
    
    //Step 2c
    $re = '/^(.+?)(оудес|оудым)$/';
    if (preg_match($re, $w)) {
        preg_match($re, $w, $match);
        $stem = $match[1];
        $w = $stem;

        $exept3 = '/(аяй|йакиай|петак|кив|пкен|сй|с|жк|жя|бек|коук|вм|сп|тяац|же)$/';
        if (preg_match($exept3, $w)) {
            $w = $w . 'оуд';
        }
    }
    
    
    
    
    //Step 2d
    $re = '/^(.+?)(еыс|еым)$/';
    if (preg_match($re, $w)) {
        preg_match($re, $w, $match);
        $stem = $match[1];
        $w = $stem;
        $test1 = false;

        $exept4 = '/^(х|д|ек|цак|м|п|ид|пая)$/';
        if (preg_match($exept4, $w)) {
            $w = $w . 'е';
        }
    }
    
    
    
    $fp = [];
    //Step 3
    $re = '/^(.+?)(иа|иоу|иым)$/';
    if (preg_match($re, $w, $fp)) {
        $stem = $fp[1];
        $w = $stem;
        $re = '/' . $v . '$/';
        $test1 = false;
        if (preg_match($re, $w)) {
            $w = $stem . 'и';
        }
    }
    
    
    
    
    //Step 4
    $re = '/^(.+?)(ийа|ийо|ийоу|ийым)$/';
    if (preg_match($re, $w)) {
        preg_match($re, $w, $match);
        $stem = $match[1];
        $w = $stem;

        $test1 = false;
        $re = '/' . $v . '$/';
        $exept5 = '/^(ак|ад|емд|алам|алловак|гх|амгх|амтид|жус|бяыл|цея|еныд|йакп|йакким|йатад|лоук|лпам|лпациат|лпок|лпос|мит|ний|сумолгк|петс|питс|пийамт|пкиатс|постекм|пяытод|сеят|сумад|тсал|упод|жиком|жукод|вас)$/';
        if (preg_match($re, $w) || preg_match($exept5, $w)) {
            $w = $w . 'ий';
        }
    }
    
    
    
    
    
    //step 5a
    $re = '/^(.+?)(але)$/';
    $re2 = '/^(.+?)(ацале|гсале|оусале|гйале|гхгйале)$/';
    if ($w == "ацале") {
        $w = "ацал";
    }
    if (preg_match($re2, $w)) {
        preg_match($re2, $w, $match);
        $stem = $match[1];
        $w = $stem;
        $test1 = false;
    }
    if (preg_match($re, $w)) {
        preg_match($re, $w, $match);
        $stem = $match[1];
        $w = $stem;
        $test1 = false;

        $exept6 = '/^(амап|апох|апой|апост|боуб|нех|оук|пех|пийя|пот|сив|в)$/';
        if (preg_match($exept6, $w)) {
            $w = $w . "ал";
        }
    }
    
    
    
    
    
    
    //Step 5b
    $re2 = '/^(.+?)(аме)$/';
    $re3 = '/^(.+?)(ацаме|гсаме|оусаме|иомтаме|иотаме|иоумтаме|омтаме|отаме|оумтаме|гйаме|гхгйаме)$/';
    if (preg_match($re3, $w)) {
        preg_match($re3, $w, $match);
        $stem = $match[1];
        $w = $stem;
        $test1 = false;

        $re3 = '/^(тя|тс)$/';
        if (preg_match($re3, $w)) {
            $w = $w . "ацам";
        }
    }
    if (preg_match($re2, $w)) {
        preg_match($re2, $w, $match);
        $stem = $match[1];
        $w = $stem;
        $test1 = false;

        $re2 = '/' . $v2 . '$/';
        $exept7 = '/^(бетея|боукй|бяавл|ц|дяадоул|х|йакпоуф|йастек|йоялоя|каопк|лыалех|л|лоусоукл|м|оук|п|пекей|пк|покис|пояток|саяайатс|соукт|тсаякат|ояж|тсицц|тсоп|жытостеж|в|ьувопк|ац|ояж|цак|цея|дей|дипк|алеяийам|оуя|пих|поуяит|с|фымт|ий|йаст|йоп|кив|коухгя|лаимт|лек|сиц|сп|стец|тяац|тсац|ж|ея|адап|ахицц|алгв|амий|амояц|апгц|апих|атсицц|бас|басй|бахуцак|биолгв|бяавуй|диат|диаж|емояц|хус|йапмобиолгв|йатацак|йкиб|йоикаяж|киб|лецкобиолгв|лийяобиолгв|мтаб|нгяойкиб|окицодал|окоцак|пемтаяж|пеягж|пеяитя|пкат|покудап|покулгв|стеж|таб|тет|упеягж|упойоп|валгкодап|ьгкотаб)$/';
        if (preg_match($re2, $w) || preg_match($exept7, $w)) {
            $w = $w . "ам";
        }
    }
    
    
    
    
    //Step 5c
    $re3 = '/^(.+?)(ете)$/';
    $re4 = '/^(.+?)(гсете)$/';
    if (preg_match($re4, $w)) {
        preg_match($re4, $w, $match);
        $stem = $match[1];
        $w = $stem;
        $test1 = false;
    }
    if (preg_match($re3, $w)) {
        preg_match($re3, $w, $match);
        $stem = $match[1];
        $w = $stem;
        $test1 = false;

        $re3 = '/' . $v2 . '$/';
        $exept8 = '/(од|аия|жоя|тах|диах|св|емд|еуя|тих|упеях|яах|емх|яох|сх|пуя|аим|сумд|сум|сумх|выя|пом|бя|йах|еух|ейх|мет|яом|аяй|бая|бок|ыжек)$/';
        $exept9 = '/^(абая|бем|емая|абя|ад|ах|ам|апк|баяом|мтя|сй|йоп|лпоя|миж|пац|паяайак|сеяп|сйек|суяж|той|у|д|ел|хаяя|х)$/';

        if (preg_match($re3, $w) || preg_match($exept8, $w) || preg_match($exept9, $w)) {
            $w = $w . "ет";
        }
    }
    
    
    
    
    
    
    
    //Step 5d
    $re = '/^(.+?)(омтас|ымтас)$/';
    if (preg_match($re, $w)) {
        preg_match($re, $w, $match);
        $stem = $match[1];
        $w = $stem;
        $test1 = false;

        $exept10 = '/^(аяв)$/';
        $exept11 = '/(йяе)$/';
        if (preg_match($exept10, $w)) {
            $w = $w . "омт";
        }
        if (preg_match($exept11, $w)) {
            $w = $w . "ымт";
        }
    }
    
    
    
    
    
    
    
    //Step 5e
    $re = '/^(.+?)(оласте|иоласте)$/';
    if (preg_match($re, $w)) {
        preg_match($re, $w, $match);
        $stem = $match[1];
        $w = $stem;
        $test1 = false;

        $exept11 = '/^(ом)$/';
        if (preg_match($exept11, $w)) {
            $w = $w . "оласт";
        }
    }
    
    
    
    
    
    
    
    
    //Step 5f
    $re = '/^(.+?)(есте)$/';
    $re2 = '/^(.+?)(иесте)$/';

    if (preg_match($re2, $w)) {
        preg_match($re2, $w, $match);
        $stem = $match[1];
        $w = $stem;
        $test1 = false;

        $re2 = '/^(п|ап|сулп|асулп|айатап|алеталж)$/';
        if (preg_match($re2, $w)) {
            $w = $w . "иест";
        }
    }
    
    if (preg_match($re, $w)) {
        preg_match($re, $w, $match);
        $stem = $match[1];
        $w = $stem;
        $test1 = false;

        $exept12 = '/^(ак|ая|ейтек|ф|л|н|паяайак|ая|пяо|мис)$/';
        if (preg_match($exept12, $w)) {
            $w = $w . "ест";
        }
    }
    
    
    
    
    
    
    
    
    
    //Step 5g
    $re = '/^(.+?)(гйа|гйес|гйе)$/';
    $re2 = '/^(.+?)(гхгйа|гхгйес|гхгйе)$/';

    if (preg_match($re2, $w)) {
        preg_match($re2, $w, $match);
        $stem = $match[1];
        $w = $stem;
        $test1 = false;
    }
    
    if (preg_match($re, $w)) {
        preg_match($re, $w, $match);
        $stem = $match[1];
        $w = $stem;
        $test1 = false;

        $exept13 = '/(сйык|сйоук|маях|сж|ох|пих)$/';
        $exept14 = '/^(диах|х|паяайатах|пяосх|сумх|)$/';
        if (preg_match($exept13, $w) || preg_match($exept14, $w)) {
            $w = $w . "гй";
        }
    }
    
    
    
    
    
    //Step 5h
    $re = '/^(.+?)(оуса|оусес|оусе)$/';
    if (preg_match($re, $w)) {
        preg_match($re, $w, $match);
        $stem = $match[1];
        $w = $stem;
        $test1 = false;

        $exept15 = '/^(жаялай|вад|ацй|амаяя|бяол|ейкип|калпид|кев|л|пат|я|к|лед|лесаф|употеим|ал|аих|амгй|деспоф|емдиажея|де|деутеяеу|йахаяеу|пке|тса)$/';
        $exept16 = '/(подая|бкеп|памтав|жяуд|ламтик|лакк|йулат|кав|кгц|жац|ол|пяыт)$/';
        if (preg_match($exept15, $w) || preg_match($exept16, $w)) {
            $w = $w . "оус";
        }
    }

    //Step 5i
    $re = '/^(.+?)(аца|ацес|аце)$/';
    if (preg_match($re, $w)) {
        preg_match($re, $w, $match);
        $stem = $match[1];
        $w = $stem;
        $test1 = false;

        $exept17 = '/^(ьож|мауков)$/';
        $exept20 = '/(йокк)$/';
        $exept18 = '/^(абаст|покуж|адгж|палж|я|асп|аж|алак|алакки|амуст|апея|аспая|авая|деябем|дяосоп|неж|меоп|молот|окоп|олот|пяост|пяосыпоп|сулп|сумт|т|упот|вая|аеип|аилост|амуп|апот|аятип|диат|ем|епит|йяойакоп|сидгяоп|к|мау|оукал|оуя|п|тя|л)$/';
        $exept19 = '/(ож|пек|воят|кк|сж|яп|жя|пя|ков|слгм)$/';

        if ((preg_match($exept18, $w) || preg_match($exept19, $w)) && !(preg_match($exept17, $w) || preg_match($exept20, $w))) {
            $w = $w . "ац";
        }
    }
    
    
    
    
    
    //Step 5j
    $re = '/^(.+?)(гсе|гсоу|гса)$/';
    if (preg_match($re, $w)) {
        preg_match($re, $w, $match);
        $stem = $match[1];
        $w = $stem;
        $test1 = false;

        $exept21 = '/^(м|веясом|дыдейам|еяглом|лецаком|ептам)$/';
        if (preg_match($exept21, $w)) {
            $w = $w . "гс";
        }
    }
    
    
    
    
    
    
    //Step 5k
    $re = '/^(.+?)(гсте)$/';
    if (preg_match($re, $w)) {
        preg_match($re, $w, $match);
        $stem = $match[1];
        $w = $stem;
        $test1 = false;

        $exept22 = '/^(асб|сб|авя|вя|апк|аеилм|дусвя|еувя|йоимовя|пакиль)$/';
        if (preg_match($exept22, $w)) {
            $w = $w . "гст";
        }
    }
    
    
    
    
    
    
    //Step 5l
    $re = '/^(.+?)(оуме|гсоуме|гхоуме)$/';
    if (preg_match($re, $w)) {
        preg_match($re, $w, $match);
        $stem = $match[1];
        $w = $stem;
        $test1 = false;

        $exept23 = '/^(м|я|спи|стяаболоутс|йайолоутс|еным)$/';
        if (preg_match($exept23, $w)) {
            $w = $w . "оум";
        }
    }
    
    
    
    
    
    //Step 5l
    $re = '/^(.+?)(оуле|гсоуле|гхоуле)$/';
    if (preg_match($re, $w)) {
        preg_match($re, $w, $match);
        $stem = $match[1];
        $w = $stem;
        $test1 = false;

        $exept24 = '/^(паяасоус|ж|в|ыяиопк|аф|аккосоус|асоус)$/';
        if (preg_match($exept24, $w)) {
            $w = $w . "оул";
        }
    }
    
    
    
    
    
    // Step 6
    $re = '/^(.+?)(лата|латым|латос)$/';
    $re2 = '/^(.+?)(а|ацате|ацам|аеи|алаи|ам|ас|асаи|атаи|аы|е|еи|еис|еите|есаи|ес|етаи|и|иелаи|иеласте|иетаи|иесаи|иесасте|иоластам|иолоум|иолоума|иомтам|иомтоусам|иосастам|иосасте|иосоум|иосоума|иотам|иоула|иоуласте|иоумтаи|иоумтам|г|гдес|гдым|гхеи|гхеис|гхеите|гхгйате|гхгйам|гхоум|гхы|гйате|гйам|гс|гсам|гсате|гсеи|гсес|гсоум|гсы|о|ои|олаи|оластам|олоум|олоума|омтаи|омтам|омтоусам|ос|осастам|осасте|осоум|осоума|отам|оу|оулаи|оуласте|оум|оумтаи|оумтам|оус|оусам|оусате|у|ус|ы|ым)$/';
    if (preg_match($re, $w, $match)) {
        //debug($w,6);
        $stem = $match[1];
        $w = $stem . "ла";
        
    }
    
    if (preg_match($re2, $w) && $test1) {
        //debug($w,"6-re2");
        preg_match($re2, $w, $match);
        $stem = $match[1];
        $w = $stem;
        
    }
    
   
    
    
    
    // Step 7 (паяахетийа)
    $re = '/^(.+?)(естея|естат|отея|отат|утея|утат|ытея|ытат)$/';
    if (preg_match($re, $w)) {
        preg_match($re, $w, $match);
        $stem = $match[1];
        $w = $stem;
    }
  
    return returnStem($w, $encoding_changed);
}






/**
 *  Reverts the encoding if needed and returns the stemmed 
 * 
 *  @param type $w                  :   The stemmed word
 *  @param type $encoding_changed   :   The encoding has changed
 *  @return type                    :   The stemmed word
 */
function returnStem($w, $encoding_changed) {
    // If the size of the word is less than two,
    // then the word is important for the text.
    if (strlen($w) > 2) {
        // If the encoding was changed, revert to the original.
        // Then return the stemmed word.
        if ($encoding_changed == TRUE)
            $w = mb_convert_encoding($w, "UTF-8", "ISO-8859-7");
        return
                $w;
    }
    else {
        return null;
    }
}

?>